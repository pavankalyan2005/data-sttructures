#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void insertAtBeginning(struct Node** headRef, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *headRef;
    *headRef = newNode;
}
void deleteAtBeginning(struct Node** headRef) {
    if (*headRef == NULL) {
        printf("List is empty, deletion not possible\n");
        return;
    }
    struct Node* temp = *headRef;
    *headRef = (*headRef)->next;
    free(temp);
}
void deleteAtEnd(struct Node** headRef) {
    if (*headRef == NULL) {
        printf("List is empty, deletion not possible\n");
        return;
    }
    struct Node* temp = *headRef;
    struct Node* prev = NULL;
    while (temp->next != NULL) {
        prev = temp;
        temp = temp->next;
    }
    if (prev == NULL) { // Only one node in the list
        *headRef = NULL;
    } else {
        prev->next = NULL;
    }
    free(temp);
}
void deleteAtMiddle(struct Node** headRef, int position) {
    if (*headRef == NULL) {
        printf("List is empty, deletion not possible\n");
        return;
    }
    struct Node* temp = *headRef;
    if (position == 1) {
        *headRef = temp->next;
        free(temp);
        return;
    }
    int count = 1;
    while (temp != NULL && count < position - 1) {
        temp = temp->next;
        count++;
    }
    if (temp == NULL || temp->next == NULL) {
        printf("Invalid position for deletion\n");
        return;
    }
    struct Node* nodeToDelete = temp->next;
    temp->next = temp->next->next;
    free(nodeToDelete);
}
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}
int main() {
    struct Node* head = NULL;
    insertAtBeginning(&head, 5);
    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 15);
    insertAtBeginning(&head, 20);
    insertAtBeginning(&head, 25);
    printf("Linked list before deletion: ");
    printList(head);
    deleteAtBeginning(&head);
    printf("Linked list after deletion at beginning: ");
    printList(head);
    deleteAtEnd(&head);
    printf("Linked list after deletion at end: ");
    printList(head);
    deleteAtMiddle(&head, 2); 
    printf("Linked list after deletion at middle: ");
    printList(head);
    return 0;
}
